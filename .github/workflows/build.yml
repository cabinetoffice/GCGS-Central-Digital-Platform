name: Build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:

    runs-on: ubuntu-latest
    name: Tests
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Build
        run: make build OpenAPI
      - name: Test
        run: make test TEST_OPTIONS="--logger trx --results-directory 'TestResults-${{ matrix.dotnet-version }}'"
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-dotnet-${{ matrix.dotnet-version }}
          path: TestResults-${{ matrix.dotnet-version }}
        if: ${{ always() }}
      - name: Upload OpenAPI contracts
        uses: actions/upload-artifact@v4
        with:
          name: OpenAPI
          path: OpenAPI

  docker:
    runs-on: ubuntu-latest
    name: Build containers
    env:
      CDP_ORGANISATION_APP_PORT: 8888
      CDP_TENANT_PORT: 8811
      CDP_ORGANISATION_PORT: 8822
      CDP_PERSON_PORT: 8833
      CDP_FORMS_PORT: 8844
      CDP_DATA_SHARING_PORT: 8855
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine the version
        id: version
        run: |
          COMMIT_REF=$(if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then echo "${{ github.event.pull_request.head.sha }}"; else echo "${GITHUB_SHA:-HEAD}"; fi)
          CURRENT_COMMIT=$(make version-commit COMMIT_REF=$COMMIT_REF)
          CURRENT_TAG=$([[ "${GITHUB_REF:0:10}" = "refs/tags/" ]] && echo ${GITHUB_REF#refs/tags/} || echo "")
          LAST_TAG=$(make last-tag)
          VERSION=$([[ "${CURRENT_TAG}" = "" ]] && echo "${LAST_TAG}-${CURRENT_COMMIT}" || echo "$CURRENT_TAG")
          echo "Version: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Build
        run: make build-docker
        env:
          IMAGE_VERSION: ${{ steps.version.outputs.version }}
      - name: Start services
        run: make up
        env:
          IMAGE_VERSION: ${{ steps.version.outputs.version }}
      - name: Stop services
        run: make down
        env:
          IMAGE_VERSION: ${{ steps.version.outputs.version }}
      - name: Save Docker Images
        run: |
          IMAGES=$(docker images | awk '$1 ~ /cabinetoffice\/cdp-/ && $2 ~ /^'$IMAGE_VERSION'$/ { print $1":"$2}')
          docker save -o cdp-images.tar $IMAGES
        env:
          IMAGE_VERSION: ${{ steps.version.outputs.version }}
      - name: Upload Docker Images as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: cdp-images.tar

  docs:
    runs-on: ubuntu-latest
    name: Build documentation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build
        run: cd docs && make build
      - name: Publish
        if: github.ref == 'refs/heads/main' && github.repository_owner == 'cabinetoffice'
        run: cd docs && make publish
      - name: Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: Documentation
          path: docs/build/*
