{
  "Comment": "State machine for updating DynamoDB and Slack without Lambda",
  "StartAt": "Is First Message",
  "States": {
    "Is First Message": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.detail.action",
              "StringMatches": "Source"
            },
            {
              "Variable": "$.detail.state",
              "StringMatches": "STARTED"
            }
          ],
          "Next": "Get Envs Service Versions"
        },
        {
          "And": [
            {
              "Variable": "$.detail.action",
              "StringEquals": "Source"
            },
            {
              "Variable": "$.detail.state",
              "StringEquals": "SUCCEEDED"
            }
          ],
          "Next": "Update Message Source Details"
        }
      ],
      "Default": "Update Message"
    },
    "Get Envs Service Versions": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Parameters": {
        "Name": "${ssm_envs_service_version_name}",
        "WithDecryption": true
      },
      "ResultPath": "$.serviceVersions",
      "Next": "Parse Service Versions"
    },
    "Parse Service Versions": {
    "Type": "Pass",
      "Parameters": {
        "parsedServiceVersions.$": "States.StringToJson($.serviceVersions.Parameter.Value)"
      },
      "ResultPath": "$.parsedServiceVersions",
      "Next": "Create Message"
    },
    "Create Message": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${dynamodb_table_name}",
        "Item": {
          "pipeline_execution_id": {
            "S.$": "$.detail.execution-id"
          },
          "commit_message": {
            "S": "..."
          },
          "commit_link": {
            "S": "..."
          },
          "title": {
            "S": "New deployment started, blah blah"
          },
          "stages": {
            "M": {
              "Source": {
                "S.$": "States.Format(':loading: ` STARTED ` @ `{}`', $.detail['start-time'])"
              },
              "cdp-sirsi-deployment-to-orchestrator": {
                "S.$": "States.Format(':white_circle: ` PENDING ` @ `{}....`', $.time)"
              },
              "cdp-sirsi-deployment-to-development": {
                "S.$": "States.Format(':white_circle: ` PENDING ` @ `{}....`', $.time)"
              },
              "cdp-sirsi-deployment-to-staging": {
                "S.$": "States.Format(':white_circle: ` PENDING ` @ `{}....`', $.time)"
              },
              "cdp-sirsi-deployment-to-integration": {
                "S.$": "States.Format(':white_circle: ` PENDING ` @ `{}....`', $.time)"
              },
              "cdp-sirsi-deployment-to-production": {
                "S.$": "States.Format(':white_circle: ` PENDING ` @ `{}....`', $.time)"
              }
            }
          },
          "Versions": {
            "M": {
              "development": {
                "S.$": "$.parsedServiceVersions.parsedServiceVersions['development']"
              },
              "staging": {
                "S.$": "$.parsedServiceVersions.parsedServiceVersions['staging']"
              },
              "integration": {
                "S.$": "$.parsedServiceVersions.parsedServiceVersions['integration']"
              },
              "production": {
                "S.$": "$.parsedServiceVersions.parsedServiceVersions['production']"
              }
            }
          }
        }
      },
      "ResultPath": "$.result",
      "Next": "Get Message"
    },
    "Get Message": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${dynamodb_table_name}",
        "Key": {
          "pipeline_execution_id": {
            "S.$": "$.detail.execution-id"
          }
        }
      },
      "ResultSelector": {
        "Attributes.$": "$.Item"
      },
      "ResultPath": "$.dynamoResult",
      "Next": "Format Slack Message"
    },
    "Has Slack Timestamp": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.dynamoResult.Attributes.slack_ts",
          "IsPresent": true,
          "Next": "Slack Update Message"
        }
      ],
      "Default": "Slack Post Message"
    },
    "Set Slack Timestamp": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${dynamodb_table_name}",
        "Key": {
          "pipeline_execution_id": {
            "S.$": "$.detail.execution-id"
          }
        },
        "UpdateExpression": "SET slack_ts = :slack_ts",
        "ExpressionAttributeValues": {
          ":slack_ts": {
            "S.$": "$.slackResponse.ResponseBody.ts"
          }
        }
      },
      "End": true
    },
    "Update Message Source Details": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${dynamodb_table_name}",
        "Key": {
          "pipeline_execution_id": {
            "S.$": "$.detail.execution-id"
          }
        },
        "UpdateExpression": "SET commit_message = :summary, commit_link = :commit",
        "ExpressionAttributeValues": {
          ":summary": {
            "S.$": "$.commit_message.commit_message"
          },
          ":commit": {
            "S.$": "$.commit_link.commit_link"
          }
        },
        "ReturnValues": "ALL_NEW"
      },
      "ResultSelector": {
        "Attributes.$": "$.Attributes"
      },
      "ResultPath": "$.dynamoResult",
      "Next": "Update Message"
    },
    "Update Message": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${dynamodb_table_name}",
        "Key": {
          "pipeline_execution_id": {
            "S.$": "$.detail.execution-id"
          }
        },
        "UpdateExpression": "SET stages.#stage = :state",
        "ExpressionAttributeNames": {
          "#stage.$": "$.detail.action"
        },
        "ExpressionAttributeValues": {
          ":state": {
            "S.$": "$.translated_state.translated_state"
          }
        },
        "ReturnValues": "ALL_NEW"
      },
      "ResultSelector": {
        "Attributes.$": "$.Attributes"
      },
      "ResultPath": "$.dynamoResult",
      "Next": "Format Slack Message",
      "Retry": [
          {
            "ErrorEquals": ["DynamoDB.AmazonDynamoDBException"],
            "IntervalSeconds": 1,
            "MaxAttempts": 10,
            "BackoffRate": 2.0
          }
        ]
    },
    "Format Slack Message": {
      "Type": "Pass",
      "InputPath": "$.dynamoResult.Attributes",
      "Parameters": {
        "formattedMessage": {
          "text.$": "States.Format(':github: Git commit: {}\n```{}```\n:aws-codepipeline: AWS Execution ID: <https://eu-west-2.console.aws.amazon.com/codesuite/codepipeline/pipelines/cdp-sirsi-deployment/executions/{}/visualization?region=eu-west-2|{}>\n*Started Deployment Pipeline:* \n{} Pull *Source Code*\n{} Update *Orchestrator*\n{} Deploy `v{}` to *Development*\n{} Deploy `v{}` to *Staging*\n{} Deploy `v{}` to *Integration*\n{} Deploy `v{}` to *Production*', $.commit_link.S, $.commit_message.S, $.pipeline_execution_id.S,$.pipeline_execution_id.S,$.stages.M.Source.S,$.stages.M['cdp-sirsi-deployment-to-orchestrator'].S, $.stages.M['cdp-sirsi-deployment-to-development'].S, $.Versions.M['development'].S, $.stages.M['cdp-sirsi-deployment-to-staging'].S, $.Versions.M['staging'].S, $.stages.M['cdp-sirsi-deployment-to-integration'].S, $.Versions.M['integration'].S, $.stages.M['cdp-sirsi-deployment-to-production'].S, $.Versions.M['production'].S)"
        }
      },
      "ResultPath": "$.formattedMessage",
      "Next": "Has Slack Timestamp"
    },
    "Slack Post Message": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "Method": "POST",
        "ApiEndpoint": "${slack_post_endpoint}",
        "Authentication": {
          "ConnectionArn": "${auth_connection_arn}"
        },
        "RequestBody": {
          "channel": "${slack_channel_id}",
          "text.$": "$.formattedMessage.formattedMessage.text"
        }
      },
      "ResultPath": "$.slackResponse",
      "Next": "Set Slack Timestamp"
    },
    "Slack Update Message": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "Method": "POST",
        "ApiEndpoint": "${slack_update_endpoint}",
        "Authentication": {
          "ConnectionArn": "${auth_connection_arn}"
        },
        "RequestBody": {
          "channel": "${slack_channel_id}",
          "ts.$": "$.dynamoResult.Attributes.slack_ts.S",
          "text.$": "$.formattedMessage.formattedMessage.text"
        }
      },
      "End": true
    }
  }
}
