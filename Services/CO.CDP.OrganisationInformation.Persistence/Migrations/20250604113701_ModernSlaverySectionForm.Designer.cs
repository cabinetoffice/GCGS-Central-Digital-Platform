// <auto-generated />
using System;
using System.Collections.Generic;
using CO.CDP.OrganisationInformation.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CO.CDP.OrganisationInformation.Persistence.Migrations
{
    [DbContext(typeof(OrganisationInformationContext))]
    [Migration("20250604113701_ModernSlaverySectionForm")]
    partial class ModernSlaverySectionForm
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "connected_entity_individual_and_trust_category_type", new[] { "person_with_significant_control_for_indiv", "director_or_indiv_with_the_same_responsibilities_for_indiv", "any_other_indiv_with_significant_influence_or_control_for_indiv", "person_with_significant_control_for_trust", "director_or_indiv_with_the_same_responsibilities_for_trust", "any_other_indiv_with_significant_influence_or_control_for_trust" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "connected_entity_type", new[] { "organisation", "individual", "trust_or_trustee" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "connected_organisation_category", new[] { "registered_company", "director_or_the_same_responsibilities", "parent_or_subsidiary_company", "a_company_your_organisation_has_taken_over", "any_other_organisation_with_significant_influence_or_control" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "connected_person_type", new[] { "individual", "trust_or_trustee" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "control_condition", new[] { "none", "owns_shares", "has_voting_rights", "can_appoint_or_remove_directors", "has_other_significant_influence_or_control" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "organisation_relationship", new[] { "consortium" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "organisation_type", new[] { "organisation", "informal_consortium" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CO.CDP.MQ.Outbox.OutboxMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageGroupId")
                        .HasColumnType("text")
                        .HasColumnName("message_group_id");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<string>("QueueUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("queue_url");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("ix_outbox_messages_created_on");

                    b.HasIndex("Published")
                        .HasDatabaseName("ix_outbox_messages_published");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locality");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.AddressSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locality");

                    b.Property<int>("MappingId")
                        .HasColumnType("integer")
                        .HasColumnName("mapping_id");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_addresses_snapshot");

                    b.ToTable("addresses_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UrlRegex")
                        .HasColumnType("text")
                        .HasColumnName("url_regex");

                    b.HasKey("Id")
                        .HasName("pk_announcements");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_announcements_guid");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.AuthenticationKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<DateTimeOffset?>("RevokedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_on");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scopes");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_authentication_keys");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_authentication_keys_organisation_id");

                    b.HasIndex("Name", "OrganisationId")
                        .IsUnique()
                        .HasDatabaseName("ix_authentication_keys_name_organisation_id");

                    NpgsqlIndexBuilderExtensions.AreNullsDistinct(b.HasIndex("Name", "OrganisationId"), false);

                    b.ToTable("authentication_keys", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.BuyerInformation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("BuyerType")
                        .HasColumnType("text")
                        .HasColumnName("buyer_type");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int[]>("DevolvedRegulations")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("devolved_regulations");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_buyer_information");

                    b.ToTable("buyer_information", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ConnectedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyHouseNumber")
                        .HasColumnType("text")
                        .HasColumnName("company_house_number");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer")
                        .HasColumnName("entity_type");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("HasCompanyHouseNumber")
                        .HasColumnType("boolean")
                        .HasColumnName("has_company_house_number");

                    b.Property<string>("OverseasCompanyNumber")
                        .HasColumnType("text")
                        .HasColumnName("overseas_company_number");

                    b.Property<string>("RegisterName")
                        .HasColumnType("text")
                        .HasColumnName("register_name");

                    b.Property<DateTimeOffset?>("RegisteredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_date");

                    b.Property<int>("SupplierOrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_organisation_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_connected_entities");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_connected_entities_guid");

                    b.HasIndex("SupplierOrganisationId")
                        .HasDatabaseName("ix_connected_entities_supplier_organisation_id");

                    b.ToTable("connected_entities", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ConnectedEntitySnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyHouseNumber")
                        .HasColumnType("text")
                        .HasColumnName("company_house_number");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer")
                        .HasColumnName("entity_type");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("HasCompanyHouseNumber")
                        .HasColumnType("boolean")
                        .HasColumnName("has_company_house_number");

                    b.Property<int>("MappingId")
                        .HasColumnType("integer")
                        .HasColumnName("mapping_id");

                    b.Property<string>("OverseasCompanyNumber")
                        .HasColumnType("text")
                        .HasColumnName("overseas_company_number");

                    b.Property<string>("RegisterName")
                        .HasColumnType("text")
                        .HasColumnName("register_name");

                    b.Property<DateTimeOffset?>("RegisteredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_date");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_connected_entities_snapshot");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_connected_entities_snapshot_shared_consent_id");

                    b.ToTable("connected_entities_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ContactPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<string>("Telephone")
                        .HasColumnType("text")
                        .HasColumnName("telephone");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_contact_points");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_contact_points_organisation_id");

                    b.ToTable("contact_points", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ContactPointSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<string>("Telephone")
                        .HasColumnType("text")
                        .HasColumnName("telephone");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_contact_points_snapshot");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_contact_points_snapshot_shared_consent_id");

                    b.ToTable("contact_points_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Scope")
                        .HasColumnType("integer")
                        .HasColumnName("scope");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_forms");

                    b.ToTable("forms", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressValue")
                        .HasColumnType("jsonb")
                        .HasColumnName("address_value");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("boolean")
                        .HasColumnName("bool_value");

                    b.Property<Guid?>("CreatedFrom")
                        .HasColumnType("uuid")
                        .HasColumnName("created_from");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_value");

                    b.Property<DateTime?>("EndValue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_value");

                    b.Property<int>("FormAnswerSetId")
                        .HasColumnType("integer")
                        .HasColumnName("form_answer_set_id");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("JsonValue")
                        .HasColumnType("jsonb")
                        .HasColumnName("json_value");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("double precision")
                        .HasColumnName("numeric_value");

                    b.Property<string>("OptionValue")
                        .HasColumnType("text")
                        .HasColumnName("option_value");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("StartValue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_value");

                    b.Property<string>("TextValue")
                        .HasColumnType("text")
                        .HasColumnName("text_value");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_form_answers");

                    b.HasIndex("FormAnswerSetId")
                        .HasDatabaseName("ix_form_answers_form_answer_set_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_form_answers_question_id");

                    b.ToTable("form_answers", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormAnswerSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedFrom")
                        .HasColumnType("uuid")
                        .HasColumnName("created_from");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<bool>("FurtherQuestionsExempted")
                        .HasColumnType("boolean")
                        .HasColumnName("further_questions_exempted");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_form_answer_sets");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_form_answer_sets_section_id");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_form_answer_sets_shared_consent_id");

                    b.ToTable("form_answer_sets", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("NextQuestionAlternativeId")
                        .HasColumnType("integer")
                        .HasColumnName("next_question_alternative_id");

                    b.Property<int?>("NextQuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("next_question_id");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("options");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("SummaryTitle")
                        .HasColumnType("text")
                        .HasColumnName("summary_title");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_form_questions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_form_questions_name");

                    b.HasIndex("NextQuestionAlternativeId")
                        .HasDatabaseName("ix_form_questions_next_question_alternative_id");

                    b.HasIndex("NextQuestionId")
                        .HasDatabaseName("ix_form_questions_next_question_id");

                    b.HasIndex("SectionId")
                        .HasDatabaseName("ix_form_questions_section_id");

                    b.ToTable("form_questions", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsMultipleAnswerSets")
                        .HasColumnType("boolean")
                        .HasColumnName("allows_multiple_answer_sets");

                    b.Property<bool>("CheckFurtherQuestionsExempted")
                        .HasColumnType("boolean")
                        .HasColumnName("check_further_questions_exempted");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("configuration");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<int>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_form_sections");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_form_sections_form_id");

                    b.ToTable("form_sections", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedFrom")
                        .HasColumnType("uuid")
                        .HasColumnName("created_from");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FormId")
                        .HasColumnType("integer")
                        .HasColumnName("form_id");

                    b.Property<string>("FormVersionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("form_version_id");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<string>("ShareCode")
                        .HasColumnType("text")
                        .HasColumnName("share_code");

                    b.Property<int>("SubmissionState")
                        .HasColumnType("integer")
                        .HasColumnName("submission_state");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_shared_consents");

                    b.HasIndex("FormId")
                        .HasDatabaseName("ix_shared_consents_form_id");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_shared_consents_organisation_id");

                    b.ToTable("shared_consents", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsentConsortium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildSharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("child_shared_consent_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ParentSharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_shared_consent_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_shared_consent_consortiums");

                    b.HasIndex("ChildSharedConsentId")
                        .HasDatabaseName("ix_shared_consent_consortiums_child_shared_consent_id");

                    b.HasIndex("ParentSharedConsentId", "ChildSharedConsentId")
                        .IsUnique()
                        .HasDatabaseName("ix_shared_consent_consortiums_parent_shared_consent_id_child_s");

                    b.ToTable("shared_consent_consortiums", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Identifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("IdentifierId")
                        .HasColumnType("text")
                        .HasColumnName("identifier_id");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("legal_name");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean")
                        .HasColumnName("primary");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scheme");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Uri")
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_identifiers");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_identifiers_organisation_id");

                    b.ToTable("identifiers", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.IdentifierSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("IdentifierId")
                        .HasColumnType("text")
                        .HasColumnName("identifier_id");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("legal_name");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean")
                        .HasColumnName("primary");

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scheme");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<string>("Uri")
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_identifiers_snapshot");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_identifiers_snapshot_shared_consent_id");

                    b.ToTable("identifiers_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Mou", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_mou");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_mou_guid");

                    b.ToTable("mou", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.MouEmailReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<DateTimeOffset>("ReminderSentOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reminder_sent_on");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_mou_email_reminders");

                    b.HasIndex("OrganisationId")
                        .IsUnique()
                        .HasDatabaseName("ix_mou_email_reminders_organisation_id");

                    b.ToTable("mou_email_reminders", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.MouSignature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<int>("MouId")
                        .HasColumnType("integer")
                        .HasColumnName("mou_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<Guid>("SignatureGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("signature_guid");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_mou_signature");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_mou_signature_created_by_id");

                    b.HasIndex("MouId")
                        .HasDatabaseName("ix_mou_signature_mou_id");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_mou_signature_organisation_id");

                    b.HasIndex("SignatureGuid")
                        .IsUnique()
                        .HasDatabaseName("ix_mou_signature_signature_guid");

                    b.ToTable("mou_signature", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ApprovedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approved_on");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("PendingRoles")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("pending_roles");

                    b.Property<string>("ReviewComment")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)")
                        .HasColumnName("review_comment");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("integer")
                        .HasColumnName("reviewed_by_id");

                    b.Property<int[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("roles");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_organisations");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_organisations_guid");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_organisations_name");

                    b.HasIndex("ReviewedById")
                        .HasDatabaseName("ix_organisations_reviewed_by_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_organisations_tenant_id");

                    b.ToTable("organisations", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_organisation_address");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_organisation_address_address_id");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_organisation_address_organisation_id");

                    b.ToTable("organisation_address", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationAddressSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_organisation_address_snapshot");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_organisation_address_snapshot_address_id");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_organisation_address_snapshot_shared_consent_id");

                    b.ToTable("organisation_address_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("integer")
                        .HasColumnName("reviewed_by_id");

                    b.Property<DateTimeOffset?>("ReviewedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reviewed_on");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_organisation_join_requests");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_organisation_join_requests_guid");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_organisation_join_requests_organisation_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_organisation_join_requests_person_id");

                    b.HasIndex("ReviewedById")
                        .HasDatabaseName("ix_organisation_join_requests_reviewed_by_id");

                    b.ToTable("organisation_join_requests", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildOrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("child_organisation_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<OrganisationRelationship>("OrganisationRelationship")
                        .HasColumnType("organisation_relationship")
                        .HasColumnName("organisation_relationship");

                    b.Property<int>("ParentOrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_organisation_id");

                    b.Property<int?>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_organisation_parties");

                    b.HasIndex("ChildOrganisationId")
                        .HasDatabaseName("ix_organisation_parties_child_organisation_id");

                    b.HasIndex("ParentOrganisationId")
                        .HasDatabaseName("ix_organisation_parties_parent_organisation_id");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_organisation_parties_shared_consent_id");

                    b.ToTable("organisation_parties", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationPerson", b =>
                {
                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scopes");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("OrganisationId", "PersonId")
                        .HasName("pk_organisation_person");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_organisation_person_person_id");

                    b.ToTable("organisation_person", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.HasKey("Id")
                        .HasName("pk_organisations_snapshot");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_organisations_snapshot_shared_consent_id");

                    b.ToTable("organisations_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<List<string>>("PreviousUrns")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("previous_urns");

                    b.Property<List<string>>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserUrn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_urn");

                    b.HasKey("Id")
                        .HasName("pk_persons");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_email");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_guid");

                    b.HasIndex("UserUrn")
                        .IsUnique()
                        .HasDatabaseName("ix_persons_user_urn");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.PersonInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<DateTimeOffset>("InviteSentOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invite_sent_on");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("integer")
                        .HasColumnName("organisation_id");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<List<string>>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_person_invites");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_person_invites_guid");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_person_invites_organisation_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_invites_person_id");

                    b.ToTable("person_invites", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_hash");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.SupplierInformation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("CompletedConnectedPerson")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_connected_person");

                    b.Property<bool>("CompletedEmailAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_email_address");

                    b.Property<bool>("CompletedLegalForm")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_legal_form");

                    b.Property<bool>("CompletedOperationType")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_operation_type");

                    b.Property<bool>("CompletedPostalAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_postal_address");

                    b.Property<bool>("CompletedRegAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_reg_address");

                    b.Property<bool>("CompletedVat")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_vat");

                    b.Property<bool>("CompletedWebsiteAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_website_address");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int[]>("OperationTypes")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("operation_types");

                    b.Property<int?>("SupplierType")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_supplier_information");

                    b.ToTable("supplier_information", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.SupplierInformationSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CompletedConnectedPerson")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_connected_person");

                    b.Property<bool>("CompletedEmailAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_email_address");

                    b.Property<bool>("CompletedLegalForm")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_legal_form");

                    b.Property<bool>("CompletedOperationType")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_operation_type");

                    b.Property<bool>("CompletedPostalAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_postal_address");

                    b.Property<bool>("CompletedRegAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_reg_address");

                    b.Property<bool>("CompletedVat")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_vat");

                    b.Property<bool>("CompletedWebsiteAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("completed_website_address");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int[]>("OperationTypes")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("operation_types");

                    b.Property<int>("SharedConsentId")
                        .HasColumnType("integer")
                        .HasColumnName("shared_consent_id");

                    b.Property<int?>("SupplierType")
                        .HasColumnType("integer")
                        .HasColumnName("supplier_type");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_supplier_information_snapshot");

                    b.HasIndex("SharedConsentId")
                        .HasDatabaseName("ix_supplier_information_snapshot_shared_consent_id");

                    b.ToTable("supplier_information_snapshot", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("Guid")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_guid");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_tenants_name");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.TenantPerson", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.HasKey("PersonId", "TenantId")
                        .HasName("pk_tenant_person");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_person_tenant_id");

                    b.ToTable("tenant_person", (string)null);
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.AuthenticationKey", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("fk_authentication_keys_organisations_organisation_id");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.BuyerInformation", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithOne("BuyerInfo")
                        .HasForeignKey("CO.CDP.OrganisationInformation.Persistence.BuyerInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_buyer_information_organisations_id");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ConnectedEntity", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "SupplierOrganisation")
                        .WithMany()
                        .HasForeignKey("SupplierOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connected_entities_organisations_supplier_organisation_id");

                    b.OwnsMany("CO.CDP.OrganisationInformation.Persistence.ConnectedEntity+ConnectedEntityAddress", "Addresses", b1 =>
                        {
                            b1.Property<int>("ConnectedEntityId")
                                .HasColumnType("integer")
                                .HasColumnName("connected_entity_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("AddressId")
                                .HasColumnType("integer")
                                .HasColumnName("address_id");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("type");

                            b1.HasKey("ConnectedEntityId", "Id")
                                .HasName("pk_connected_entity_address");

                            b1.HasIndex("AddressId")
                                .HasDatabaseName("ix_connected_entity_address_address_id");

                            b1.ToTable("connected_entity_address", (string)null);

                            b1.HasOne("CO.CDP.OrganisationInformation.Persistence.Address", "Address")
                                .WithMany()
                                .HasForeignKey("AddressId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_connected_entity_address_address_address_id");

                            b1.WithOwner()
                                .HasForeignKey("ConnectedEntityId")
                                .HasConstraintName("fk_connected_entity_address_connected_entities_connected_entit");

                            b1.Navigation("Address");
                        });

                    b.OwnsOne("CO.CDP.OrganisationInformation.Persistence.ConnectedEntity+ConnectedIndividualTrust", "IndividualOrTrust", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("connected_individual_trust_id");

                            b1.Property<int>("Category")
                                .HasColumnType("integer")
                                .HasColumnName("category");

                            b1.Property<int>("ConnectedType")
                                .HasColumnType("integer")
                                .HasColumnName("connected_type");

                            b1.Property<int[]>("ControlCondition")
                                .IsRequired()
                                .HasColumnType("integer[]")
                                .HasColumnName("control_condition");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_on")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.Property<DateTimeOffset?>("DateOfBirth")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_of_birth");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.Property<string>("Nationality")
                                .HasColumnType("text")
                                .HasColumnName("nationality");

                            b1.Property<Guid?>("PersonId")
                                .HasColumnType("uuid")
                                .HasColumnName("person_id");

                            b1.Property<string>("ResidentCountry")
                                .HasColumnType("text")
                                .HasColumnName("resident_country");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_on")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.HasKey("Id")
                                .HasName("pk_connected_individual_trust");

                            b1.ToTable("connected_individual_trust", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("fk_connected_individual_trust_connected_entities_connected_ind");
                        });

                    b.OwnsOne("CO.CDP.OrganisationInformation.Persistence.ConnectedEntity+ConnectedOrganisation", "Organisation", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("connected_organisation_id");

                            b1.Property<int>("Category")
                                .HasColumnType("integer")
                                .HasColumnName("category");

                            b1.Property<int[]>("ControlCondition")
                                .IsRequired()
                                .HasColumnType("integer[]")
                                .HasColumnName("control_condition");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_on")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.Property<DateTimeOffset?>("InsolvencyDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("insolvency_date");

                            b1.Property<string>("LawRegistered")
                                .HasColumnType("text")
                                .HasColumnName("law_registered");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<Guid?>("OrganisationId")
                                .HasColumnType("uuid")
                                .HasColumnName("organisation_id");

                            b1.Property<string>("RegisteredLegalForm")
                                .HasColumnType("text")
                                .HasColumnName("registered_legal_form");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_on")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.HasKey("Id")
                                .HasName("pk_connected_organisation");

                            b1.ToTable("connected_organisation", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("fk_connected_organisation_connected_entities_connected_organis");
                        });

                    b.Navigation("Addresses");

                    b.Navigation("IndividualOrTrust");

                    b.Navigation("Organisation");

                    b.Navigation("SupplierOrganisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ConnectedEntitySnapshot", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_connected_entities_snapshot_shared_consents_shared_consent_");

                    b.OwnsMany("CO.CDP.OrganisationInformation.Persistence.ConnectedEntitySnapshot+ConnectedEntityAddressSnapshot", "Addresses", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("AddressId")
                                .HasColumnType("integer")
                                .HasColumnName("address_id");

                            b1.Property<int>("ConnectedEntitySnapshotId")
                                .HasColumnType("integer")
                                .HasColumnName("connected_entity_snapshot_id");

                            b1.Property<int>("Type")
                                .HasColumnType("integer")
                                .HasColumnName("type");

                            b1.HasKey("Id")
                                .HasName("pk_connected_entity_address_snapshot");

                            b1.HasIndex("AddressId")
                                .HasDatabaseName("ix_connected_entity_address_snapshot_address_id");

                            b1.HasIndex("ConnectedEntitySnapshotId")
                                .HasDatabaseName("ix_connected_entity_address_snapshot_connected_entity_snapshot");

                            b1.ToTable("connected_entity_address_snapshot", (string)null);

                            b1.HasOne("CO.CDP.OrganisationInformation.Persistence.AddressSnapshot", "Address")
                                .WithMany()
                                .HasForeignKey("AddressId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_connected_entity_address_snapshot_address_snapshot_address_");

                            b1.WithOwner()
                                .HasForeignKey("ConnectedEntitySnapshotId")
                                .HasConstraintName("fk_connected_entity_address_snapshot_connected_entity_snapshot");

                            b1.Navigation("Address");
                        });

                    b.OwnsOne("CO.CDP.OrganisationInformation.Persistence.ConnectedEntitySnapshot+ConnectedIndividualTrustSnapshot", "IndividualOrTrust", b1 =>
                        {
                            b1.Property<int>("ConnectedEntitySnapshotId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Category")
                                .HasColumnType("integer")
                                .HasColumnName("category");

                            b1.Property<int>("ConnectedType")
                                .HasColumnType("integer")
                                .HasColumnName("connected_type");

                            b1.Property<int[]>("ControlCondition")
                                .IsRequired()
                                .HasColumnType("integer[]")
                                .HasColumnName("control_condition");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_on");

                            b1.Property<DateTimeOffset?>("DateOfBirth")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_of_birth");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.Property<string>("Nationality")
                                .HasColumnType("text")
                                .HasColumnName("nationality");

                            b1.Property<Guid?>("PersonId")
                                .HasColumnType("uuid")
                                .HasColumnName("person_id");

                            b1.Property<string>("ResidentCountry")
                                .HasColumnType("text")
                                .HasColumnName("resident_country");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_on");

                            b1.HasKey("ConnectedEntitySnapshotId")
                                .HasName("pk_connected_individual_trust_snapshot");

                            b1.ToTable("connected_individual_trust_snapshot", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ConnectedEntitySnapshotId")
                                .HasConstraintName("fk_connected_individual_trust_snapshot_connected_entity_snapsh");
                        });

                    b.OwnsOne("CO.CDP.OrganisationInformation.Persistence.ConnectedEntitySnapshot+ConnectedOrganisationSnapshot", "Organisation", b1 =>
                        {
                            b1.Property<int>("ConnectedEntitySnapshotId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Category")
                                .HasColumnType("integer")
                                .HasColumnName("category");

                            b1.Property<int[]>("ControlCondition")
                                .IsRequired()
                                .HasColumnType("integer[]")
                                .HasColumnName("control_condition");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_on");

                            b1.Property<DateTimeOffset?>("InsolvencyDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("insolvency_date");

                            b1.Property<string>("LawRegistered")
                                .HasColumnType("text")
                                .HasColumnName("law_registered");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<Guid?>("OrganisationId")
                                .HasColumnType("uuid")
                                .HasColumnName("organisation_id");

                            b1.Property<string>("RegisteredLegalForm")
                                .HasColumnType("text")
                                .HasColumnName("registered_legal_form");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_on");

                            b1.HasKey("ConnectedEntitySnapshotId")
                                .HasName("pk_connected_organisation_snapshot");

                            b1.ToTable("connected_organisation_snapshot", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ConnectedEntitySnapshotId")
                                .HasConstraintName("fk_connected_organisation_snapshot_connected_entity_snapshot_id");
                        });

                    b.Navigation("Addresses");

                    b.Navigation("IndividualOrTrust");

                    b.Navigation("Organisation");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ContactPoint", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany("ContactPoints")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_points_organisations_organisation_id");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.ContactPointSnapshot", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_points_snapshot_shared_consents_shared_consent_id");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormAnswer", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.FormAnswerSet", "FormAnswerSet")
                        .WithMany("Answers")
                        .HasForeignKey("FormAnswerSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_answers_form_answer_sets_form_answer_set_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.FormQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_answers_form_questions_question_id");

                    b.Navigation("FormAnswerSet");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormAnswerSet", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.FormSection", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_answer_sets_form_section_section_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany("AnswerSets")
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_answer_sets_shared_consents_shared_consent_id");

                    b.Navigation("Section");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormQuestion", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.FormQuestion", "NextQuestionAlternative")
                        .WithMany()
                        .HasForeignKey("NextQuestionAlternativeId")
                        .HasConstraintName("fk_form_questions_form_questions_next_question_alternative_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.FormQuestion", "NextQuestion")
                        .WithMany()
                        .HasForeignKey("NextQuestionId")
                        .HasConstraintName("fk_form_questions_form_questions_next_question_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.FormSection", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_questions_form_sections_section_id");

                    b.Navigation("NextQuestion");

                    b.Navigation("NextQuestionAlternative");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormSection", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.Form", "Form")
                        .WithMany("Sections")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_form_sections_forms_form_id");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shared_consents_forms_form_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shared_consents_organisations_organisation_id");

                    b.Navigation("Form");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsentConsortium", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "ChildSharedConsent")
                        .WithMany()
                        .HasForeignKey("ChildSharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shared_consent_consortiums_shared_consents_child_shared_con");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "ParentSharedConsent")
                        .WithMany()
                        .HasForeignKey("ParentSharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shared_consent_consortiums_shared_consents_parent_shared_co");

                    b.Navigation("ChildSharedConsent");

                    b.Navigation("ParentSharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Identifier", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany("Identifiers")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identifiers_organisations_organisation_id");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.IdentifierSnapshot", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identifiers_snapshot_shared_consents_shared_consent_id");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.MouEmailReminder", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mou_email_reminders_organisations_organisation_id");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.MouSignature", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mou_signature_persons_created_by_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Mou", "Mou")
                        .WithMany()
                        .HasForeignKey("MouId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mou_signature_mou_mou_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mou_signature_organisations_organisation_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Mou");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Organisation", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("fk_organisations_persons_reviewed_by_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Tenant", "Tenant")
                        .WithMany("Organisations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisations_tenants_tenant_id");

                    b.Navigation("ReviewedBy");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationAddress", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_address_address_address_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany("Addresses")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_address_organisations_organisation_id");

                    b.Navigation("Address");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationAddressSnapshot", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.AddressSnapshot", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_address_snapshot_address_snapshot_address_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_address_snapshot_shared_consents_shared_consen");

                    b.Navigation("Address");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationJoinRequest", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_join_requests_organisations_organisation_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_join_requests_persons_person_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", "ReviewedBy")
                        .WithMany()
                        .HasForeignKey("ReviewedById")
                        .HasConstraintName("fk_organisation_join_requests_persons_reviewed_by_id");

                    b.Navigation("Organisation");

                    b.Navigation("Person");

                    b.Navigation("ReviewedBy");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationParty", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "ChildOrganisation")
                        .WithMany()
                        .HasForeignKey("ChildOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_parties_organisations_child_organisation_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "ParentOrganisation")
                        .WithMany()
                        .HasForeignKey("ParentOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_parties_organisations_parent_organisation_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .HasConstraintName("fk_organisation_parties_shared_consents_shared_consent_id");

                    b.Navigation("ChildOrganisation");

                    b.Navigation("ParentOrganisation");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationPerson", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany("OrganisationPersons")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_person_organisations_organisation_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", "Person")
                        .WithMany("PersonOrganisations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisation_person_persons_person_id");

                    b.Navigation("Organisation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.OrganisationSnapshot", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organisations_snapshot_shared_consents_shared_consent_id");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.PersonInvite", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_invites_organisations_organisation_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_person_invites_persons_person_id");

                    b.Navigation("Organisation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.SupplierInformation", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Organisation", "Organisation")
                        .WithOne("SupplierInfo")
                        .HasForeignKey("CO.CDP.OrganisationInformation.Persistence.SupplierInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_information_organisations_id");

                    b.OwnsOne("CO.CDP.OrganisationInformation.Persistence.LegalForm", "LegalForm", b1 =>
                        {
                            b1.Property<int>("SupplierInformationId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_on")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.Property<string>("LawRegistered")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("law_registered");

                            b1.Property<string>("RegisteredLegalForm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("registered_legal_form");

                            b1.Property<bool>("RegisteredUnderAct2006")
                                .HasColumnType("boolean")
                                .HasColumnName("registered_under_act2006");

                            b1.Property<DateTimeOffset>("RegistrationDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("registration_date");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_on")
                                .HasDefaultValueSql("CURRENT_TIMESTAMP");

                            b1.HasKey("SupplierInformationId")
                                .HasName("pk_legal_forms");

                            b1.ToTable("legal_forms", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SupplierInformationId")
                                .HasConstraintName("fk_legal_forms_supplier_information_id");
                        });

                    b.Navigation("LegalForm");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.SupplierInformationSnapshot", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", "SharedConsent")
                        .WithMany()
                        .HasForeignKey("SharedConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_supplier_information_snapshot_shared_consents_shared_consen");

                    b.OwnsOne("CO.CDP.OrganisationInformation.Persistence.LegalFormSnapshot", "LegalFormSnapshot", b1 =>
                        {
                            b1.Property<int>("SupplierInformationSnapshotId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_on");

                            b1.Property<string>("LawRegistered")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("law_registered");

                            b1.Property<string>("RegisteredLegalForm")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("registered_legal_form");

                            b1.Property<bool>("RegisteredUnderAct2006")
                                .HasColumnType("boolean")
                                .HasColumnName("registered_under_act2006");

                            b1.Property<DateTimeOffset>("RegistrationDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("registration_date");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("updated_on");

                            b1.HasKey("SupplierInformationSnapshotId")
                                .HasName("pk_legal_forms_snapshot");

                            b1.ToTable("legal_forms_snapshot", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SupplierInformationSnapshotId")
                                .HasConstraintName("fk_legal_forms_snapshot_supplier_information_snapshot_id");
                        });

                    b.Navigation("LegalFormSnapshot");

                    b.Navigation("SharedConsent");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.TenantPerson", b =>
                {
                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_person_persons_person_id");

                    b.HasOne("CO.CDP.OrganisationInformation.Persistence.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_person_tenants_tenant_id");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.Form", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormAnswerSet", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.FormSection", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Forms.SharedConsent", b =>
                {
                    b.Navigation("AnswerSets");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Organisation", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BuyerInfo");

                    b.Navigation("ContactPoints");

                    b.Navigation("Identifiers");

                    b.Navigation("OrganisationPersons");

                    b.Navigation("SupplierInfo");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Person", b =>
                {
                    b.Navigation("PersonOrganisations");
                });

            modelBuilder.Entity("CO.CDP.OrganisationInformation.Persistence.Tenant", b =>
                {
                    b.Navigation("Organisations");
                });
#pragma warning restore 612, 618
        }
    }
}
