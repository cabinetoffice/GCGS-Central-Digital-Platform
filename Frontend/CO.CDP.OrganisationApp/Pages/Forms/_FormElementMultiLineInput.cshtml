@model FormElementMultiLineInputModel
@using CO.CDP.Localization

@{
    var textInputHasError = Model.HasValidationError(nameof(Model.TextInput), ViewData.ModelState);
    var selectOptionHasError = Model.HasValidationError(nameof(Model.HasValue), ViewData.ModelState);
    var textInputAriaDescribedby = new List<string>();

    void RenderDescription()
    {
        if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            textInputAriaDescribedby.Add(Model.GetFieldName("TextInput-description"));
            <div id="@Model.GetFieldName("TextInput-description")">
                @Html.Raw(Model.Description)
            </div>
        }
    }

    void RenderField()
    {
        if (textInputHasError)
        {
            textInputAriaDescribedby.Add(Model.GetFieldName("TextInput-error"));

            <p class="govuk-error-message" id="@Model.GetFieldName("TextInput-error")">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Model.GetValidationMessage(nameof(Model.TextInput), ViewData.ModelState)
            </p>
        }

        textInputAriaDescribedby.Add(Model.GetFieldName("TextInput-info"));

        <div class="govuk-character-count" data-module="govuk-character-count" data-maxlength="10000" data-threshold="90">
            <textarea class="govuk-textarea govuk-js-character-count @(Model.Options?.Layout?.Input?.CustomCssClasses) @(textInputHasError ? "govuk-textarea--error" : "")" rows="5" id="@Model.GetFieldName(nameof(Model.TextInput))" name="@Model.GetFieldName(nameof(Model.TextInput))" aria-describedby="@string.Join(" ", textInputAriaDescribedby)">@Model.TextInput</textarea>
            <div id="@Model.GetFieldName("TextInput-info")" class="govuk-hint govuk-character-count__message">
                @string.Format(StaticTextResource.GovukFrontend_CharacterCount_CharactersAvailable, "10,000")
            </div>
        </div>
    }
}

<div class="govuk-form-group @((Model.IsRequired && textInputHasError) || selectOptionHasError ? "govuk-form-group--error" : "")">
    @if (Model.IsRequired)
    {
        @RenderLabelHeading(Model.Heading, Model.GetFieldName(nameof(Model.TextInput)), Model.Caption, Model.IsFirstQuestion, Model.Options?.Layout?.Heading?.Size)
        RenderDescription();
        RenderField();
    }
    else
    {
        <fieldset class="govuk-fieldset" @(selectOptionHasError ? Html.Raw($"aria-describedby=\"{Model.GetFieldName("input-error")}\"") : "")>
            @RenderLegendWithoutCaption(Model.Heading, Model.IsFirstQuestion, Model.Options?.Layout?.Heading?.Size)
            @{
                RenderDescription();
            }
            @if (selectOptionHasError)
            {
                <p class="govuk-error-message" id="@Model.GetFieldName("input-error")">
                    <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                    @Model.GetValidationMessage(nameof(Model.HasValue), ViewData.ModelState)
                </p>
            }
            <div class="govuk-radios" data-module="govuk-radios">

                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="@Model.GetFieldName(nameof(Model.HasValue))" name="@Model.GetFieldName(nameof(Model.HasValue))" type="radio"
                           value="true" data-aria-controls="@Model.GetFieldName("conditional-YES")" @(Model.HasValue == true ? "checked" : "")>
                    <label class="govuk-label govuk-radios__label" for="@Model.GetFieldName(nameof(Model.HasValue))">@StaticTextResource.Global_Yes</label>
                </div>

                <div class="govuk-radios__conditional" id="@Model.GetFieldName("conditional-YES")">
                    <div class="govuk-form-group @(textInputHasError ? "govuk-form-group--error" : "")">
                        @{
                            <label class="govuk-label" for="@Model.GetFieldName(nameof(Model.TextInput))">@Model.Caption</label>
                            RenderField();
                        }
                    </div>
                </div>

                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="@(Model.GetFieldName(nameof(Model.HasValue)) + "-1")" name="@Model.GetFieldName(nameof(Model.HasValue))" type="radio"
                           value="false" @(Model.HasValue == false ? "checked" : "")>
                    <label class="govuk-label govuk-radios__label" for="@(Model.GetFieldName(nameof(Model.HasValue)) + "-1")">@StaticTextResource.Global_No</label>
                </div>
            </div>
        </fieldset>
    }
</div>

@if (textInputHasError)
{
    <script nonce-csp>
        // GOV.UK character count is interfering with the error class application
        (function() {
            var textareaId = '@Model.GetFieldName(nameof(Model.TextInput))';

            function applyErrorClass() {
                var textarea = document.getElementById(textareaId);
                if (textarea && !textarea.classList.contains('govuk-textarea--error')) {
                    textarea.classList.add('govuk-textarea--error');
                }
            }

            // Apply on DOM ready and after a short delay to handle GOV.UK Frontend initialisation
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', function() {
                    applyErrorClass();
                    setTimeout(applyErrorClass, 100); // Fallback for late-initialising components
                });
            } else {
                applyErrorClass();
                setTimeout(applyErrorClass, 100);
            }
        })();
    </script>
}