@model FormElementAddressModel
@using CO.CDP.Localization

@{
    var addressLine1HasError = ((TagBuilder)Html.ValidationMessageFor(m => m.AddressLine1)).HasInnerHtml;
    var cityOrTownHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.TownOrCity)).HasInnerHtml;
    var postcodeHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.Postcode)).HasInnerHtml;
    var countryHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.Country)).HasInnerHtml;
}

<fieldset class="govuk-fieldset" @(!string.IsNullOrWhiteSpace(Model.Description) ? Html.Raw(@"aria-describedby=""address-hint""") : null)>
    <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
        @if (!string.IsNullOrWhiteSpace(Model.Caption))
        {
            <span class="govuk-caption-l">@Model.Caption</span>
        }
        @if (!string.IsNullOrWhiteSpace(Model.Heading))
        {
            <h1 class="govuk-fieldset__heading">@Model.Heading</h1>
        }
    </legend>

    @if (!string.IsNullOrWhiteSpace(Model.Description))
    {
        <div id="address-hint">
            @Html.Raw(Model.Description)
        </div>
    }

    @if (!Model.IsNonUkAddress)
    {
        <p>
            <a class="govuk-link govuk-!-font-size-19" href="?UkOrNonUk=non-uk@(Context.Request.Query.ContainsKey("frm-chk-answer") ? "&frm-chk-answer" : "")">
                @StaticTextResource.Forms_FormElementAddress_EnterNonUKAddress
            </a>
        </p>
    }

    <div class="govuk-form-group govuk-!-margin-top-3 @(addressLine1HasError ? "govuk-form-group--error" : "")">
        <label class="govuk-label" for="@Model.GetFieldName(nameof(Model.AddressLine1))">
            @Html.DisplayNameFor(m => m.AddressLine1)
        </label>
        @if (addressLine1HasError)
        {
            <p id="address-one-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Html.ValidationMessageFor(m => m.AddressLine1)
            </p>
        }
        <input class="govuk-input @(addressLine1HasError ? "govuk-input--error" : "")" id="@Model.GetFieldName(nameof(Model.AddressLine1))"
                value="@Model.AddressLine1" name="@Model.GetFieldName(nameof(Model.AddressLine1))" type="text"
                spellcheck="false" @(addressLine1HasError ? "aria-describedby=address-one-error" : "")>
    </div>

    <div class="govuk-form-group @(cityOrTownHasError ? "govuk-form-group--error" : "")">
        <label class="govuk-label" for="@Model.GetFieldName(nameof(Model.TownOrCity))">
            @Html.DisplayNameFor(m => m.TownOrCity)
        </label>
        @if (cityOrTownHasError)
        {
            <p id="city-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Html.ValidationMessageFor(m => m.TownOrCity)
            </p>
        }
        <input class="govuk-input govuk-!-width-two-thirds @(cityOrTownHasError ? "govuk-input--error" : "")" id="@Model.GetFieldName(nameof(Model.TownOrCity))"
                value="@Model.TownOrCity" name="@Model.GetFieldName(nameof(Model.TownOrCity))" type="text"
                spellcheck="false" @(cityOrTownHasError ? "aria-describedby=city-error" : "")>
    </div>

    <div class="govuk-form-group @(postcodeHasError ? "govuk-form-group--error" : "")">
        <label class="govuk-label" for="@Model.GetFieldName(nameof(Model.Postcode))">
            @Model.PostcodeLabel
        </label>
        @if (postcodeHasError)
        {
            <p id="postcode-error" class="govuk-error-message">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Html.ValidationMessageFor(m => m.Postcode)
            </p>
        }
        <input class="govuk-input govuk-input--width-10 @(postcodeHasError ? "govuk-input--error" : "")" id="@Model.GetFieldName(nameof(Model.Postcode))"
                value="@Model.Postcode" name="@Model.GetFieldName(nameof(Model.Postcode))" type="text"
                spellcheck="false" @(postcodeHasError ? "aria-describedby=postcode-error" : "")>
    </div>

    @if (Model.IsNonUkAddress)
    {
        <div class="govuk-form-group @(countryHasError ? "govuk-form-group--error" : "")">
            <label class="govuk-label" for="@Model.GetFieldName(nameof(Model.Country))">
                @Html.DisplayNameFor(m => m.Country)
            </label>
            @if (countryHasError)
            {
                <p id="country-error" class="govuk-error-message">
                    <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                    @Html.ValidationMessageFor(m => m.Country)
                </p>
            }
            <select asp-for="Country" class="govuk-select @(countryHasError ? "govuk-select--error" : "")" id="@Model.GetFieldName(nameof(Model.Country))" name="@Model.GetFieldName(nameof(Model.Country))">
                <option value="">@StaticTextResource.Global_PleaseSelect</option>
                @foreach (var cnt in Constants.Country.NonUKCountries)
                {
                    <option value="@cnt.Key">@cnt.Value</option>
                }
            </select>
        </div>
    }
    else
    {
        <div class="govuk-form-group govuk-visually-hidden">
            <label class="govuk-label" for="@Model.GetFieldName(nameof(Model.Country))">
                @Html.DisplayNameFor(m => m.Country)
            </label>
            <input type="hidden" id="@Model.GetFieldName(nameof(Model.Country))" name="@Model.GetFieldName(nameof(Model.Country))" value="@Constants.Country.UKCountryCode" />
        </div>
    }
</fieldset>
