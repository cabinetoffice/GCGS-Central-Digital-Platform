@model FormElementDateInputModel
@using CO.CDP.Localization
@using System.Text.RegularExpressions

@{
    var dayHasError = Model.HasValidationError(nameof(Model.Day), ViewData.ModelState);
    var monthHasError = Model.HasValidationError(nameof(Model.Month), ViewData.ModelState);
    var yearHasError = Model.HasValidationError(nameof(Model.Year), ViewData.ModelState);
    var dateStringHasError = Model.HasValidationError(nameof(Model.DateString), ViewData.ModelState);
    var hasDateError = dateStringHasError || dayHasError || monthHasError || yearHasError;
    var selectOptionHasError = Model.HasValidationError(nameof(Model.HasValue), ViewData.ModelState);


    string GetAriaDescribedBy()
    {
        string html = Model.Description!;
        string pattern = @"id=""([^""]+)""";
        string ariaDescribedBy = "";

        if (html != null)
        {
            Match match = Regex.Match(html, pattern);
            if (match.Success)
            {
                ariaDescribedBy = match.Groups[1].Value;
            }
        }

        return ariaDescribedBy;
    }

    void RenderField()
    {

        <div id="@Model.GetFieldName("date-hint")">
            @if (!string.IsNullOrWhiteSpace(Model.Caption))
            {
                @Html.Raw(Model.Caption)
            }
            else
            {
                <div class="govuk-hint">@StaticTextResource.Forms_FormElementDateInput_ExampleHint</div>
            }
        </div>

        @if (dayHasError)
        {
            <p class="govuk-error-message" id="@Model.GetFieldName("day-error")">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Model.GetValidationMessage(nameof(Model.Day), ViewData.ModelState)
            </p>
        }
        @if (monthHasError)
        {
            <p class="govuk-error-message" id="@Model.GetFieldName("month-error")">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Model.GetValidationMessage(nameof(Model.Month), ViewData.ModelState)
            </p>
        }
        @if (yearHasError)
        {
            <p class="govuk-error-message" id="@Model.GetFieldName("year-error")">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Model.GetValidationMessage(nameof(Model.Year), ViewData.ModelState)
            </p>
        }
        @if (dateStringHasError)
        {
            <p class="govuk-error-message" id="@Model.GetFieldName("date-error")">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Model.GetValidationMessage(nameof(Model.DateString), ViewData.ModelState)
            </p>
        }
        <div class="govuk-date-input">
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    <label class="govuk-label govuk-date-input__label" for="@Model.GetFieldName(nameof(Model.Day))">
                        @StaticTextResource.Global_Day
                    </label>
                    <input class="govuk-input govuk-date-input__input govuk-input--width-2 @(dayHasError || dateStringHasError ? "govuk-input--error" : "")"
                           id="@Model.GetFieldName(nameof(Model.Day))" name="@Model.GetFieldName(nameof(Model.Day))" type="text" inputmode="numeric" value="@Model.Day">
                </div>
            </div>
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    <label class="govuk-label govuk-date-input__label" for="@Model.GetFieldName(nameof(Model.Month))">
                        @StaticTextResource.Global_Month
                    </label>
                    <input class="govuk-input govuk-date-input__input govuk-input--width-2 @(monthHasError || dateStringHasError ? "govuk-input--error" : "")"
                           id="@Model.GetFieldName(nameof(Model.Month))" name="@Model.GetFieldName(nameof(Model.Month))" type="text" inputmode="numeric" value="@Model.Month">
                </div>
            </div>
            <div class="govuk-date-input__item">
                <div class="govuk-form-group">
                    <label class="govuk-label govuk-date-input__label" for="@Model.GetFieldName(nameof(Model.Year))">
                        @StaticTextResource.Global_Year
                    </label>
                    <input class="govuk-input govuk-date-input__input govuk-input--width-4 @(yearHasError || dateStringHasError ? "govuk-input--error" : "")"
                           id="@Model.GetFieldName(nameof(Model.Year))" name="@Model.GetFieldName(nameof(Model.Year))" type="text" inputmode="numeric" value="@Model.Year">
                </div>
            </div>
        </div>
    }
}

<div class="govuk-form-group @((Model.IsRequired && hasDateError) || selectOptionHasError ? "govuk-form-group--error" : "")">
    <fieldset class="govuk-fieldset" role="group" aria-describedby="@GetAriaDescribedBy()">
        @RenderLegendWithoutCaption(Model.Heading, Model.IsFirstQuestion, Model.Options?.Layout?.Heading?.Size, Model.GetFieldName("outer-legend"))

        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            @Html.Raw(Model.Description)
        }

        @if (selectOptionHasError)
        {
            <p class="govuk-error-message" id="@Model.GetFieldName("has-value-error")">
                <span class="govuk-visually-hidden">@StaticTextResource.Global_Error:</span>
                @Model.GetValidationMessage(nameof(Model.HasValue), ViewData.ModelState)
            </p>
        }

        @if (Model.IsRequired)
        {
            RenderField();
        }
        else
        {
            <div class="govuk-radios" data-module="govuk-radios">

                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="@Model.GetFieldName(nameof(Model.HasValue))" name="@Model.GetFieldName(nameof(Model.HasValue))" type="radio"
                           value="true" data-aria-controls="conditional-YES" @(Model.HasValue == true ? "checked" : "")>
                    <label class="govuk-label govuk-radios__label" for="@Model.GetFieldName(nameof(Model.HasValue))">@StaticTextResource.Global_Yes</label>
                </div>

                <div class="govuk-radios__conditional" id="@Model.GetFieldName("conditional-YES")">
                    <div class="govuk-form-group @(hasDateError ? "govuk-form-group--error" : "")">
                        <fieldset class="govuk-fieldset" role="group" aria-describedby="date-hint" aria-labelledby="outer-legend inner-legend">
                            @{
                                RenderField();
                            }
                        </fieldset>
                    </div>
                </div>

                <div class="govuk-radios__item">
                    <input class="govuk-radios__input" id="@(Model.GetFieldName(nameof(Model.HasValue)) + "-1")" name="@Model.GetFieldName(nameof(Model.HasValue))" type="radio"
                           value="false" @(Model.HasValue == false ? "checked" : "")>
                    <label class="govuk-label govuk-radios__label" for="@(Model.GetFieldName(nameof(Model.HasValue)) + "-1")">@StaticTextResource.Global_No</label>
                </div>
            </div>
        }
    </fieldset>
</div>
