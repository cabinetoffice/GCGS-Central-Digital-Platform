@page "/organisation/{organisationId:guid}/forms/{formId:guid}/sections/{sectionId:guid}/questions/{currentQuestionId}"
@model CO.CDP.OrganisationApp.Pages.Forms.FormsQuestionPageModel
@using CO.CDP.Localization
@using CO.CDP.OrganisationApp.Models
@using Microsoft.AspNetCore.Html

@{
    var isCheckYourAnswersPage = Model.CurrentFormQuestionType == FormQuestionType.CheckYourAnswers;
    var backUrl = Model.IsInformalConsortium
        ? $"/consortium/{Model.OrganisationId}/overview"
        : $"/organisation/{Model.OrganisationId}/supplier-information";
    var fromCheckAnswerPage = Model.RedirectFromCheckYourAnswerPage == true;

    if (Request.Query["UkOrNonUk"] == "non-uk")
    {
        backUrl = fromCheckAnswerPage ? "?frm-chk-answer" : "?";
    }
    else
    {
        if (fromCheckAnswerPage)
        {
            var checkYourAnswerQuestionId = Model.CheckYourAnswerQuestionId;
            backUrl = $"/organisation/{Model.OrganisationId}/forms/{Model.FormId}/sections/{Model.SectionId}/questions/{checkYourAnswerQuestionId}";
        }
        else if (Model.PreviousQuestion != null)
        {
            backUrl = $"/organisation/{Model.OrganisationId}/forms/{Model.FormId}/sections/{Model.SectionId}/questions/{Model.PreviousQuestion.Id}{(Model.PreviousQuestionHasNonUkAddressAnswer() ? "?UkOrNonUk=non-uk" : "")}";
        }
    }
}

@section BeforeContent {
    <a href="@backUrl" class="govuk-back-link">@StaticTextResource.Global_Back</a>
}

<div class="govuk-grid-row">
    <div class="@(isCheckYourAnswersPage ? "govuk-grid-column-full" : "govuk-grid-column-two-thirds")">
        <partial name="_ErrorSummary" model="@ModelState"/>

        @{
            var contentBlocks = FormContentBlocks.FromLayout(Model.PartialViewModel?.Options?.Layout);
        }
        @if (!Model.IsMultiQuestionPage)
        {
            @RenderContentBlock(contentBlocks.BeforeTitle, "govuk-!-margin-bottom-1")
        }

        <form method="post" enctype="@Model.EncType" novalidate>
    @if (Model.IsMultiQuestionPage && Model.MultiQuestionViewModel != null)
    {
        @await RenderMultiQuestionPage()
    }
    else
    {
        @await RenderSingleQuestionPage()
    }
</form>

        @if (!Model.IsMultiQuestionPage)
        {
            @RenderContentBlock(contentBlocks.AfterButton, "govuk-!-margin-top-0")
        }
    </div>
</div>

@functions {
    public record ContentBlock(string Content)
    {
        public static ContentBlock Empty => new("");
        public bool HasContent => !string.IsNullOrWhiteSpace(Content);
    }

    public record FormContentBlocks(
        ContentBlock BeforeTitle,
        ContentBlock BeforeButton,
        ContentBlock AfterButton
    )
    {
        public static FormContentBlocks FromLayout(LayoutOptions? layout) =>
            layout == null ? Empty : new(
                BeforeTitle: new ContentBlock(layout.BeforeTitleContent ?? ""),
                BeforeButton: new ContentBlock(layout.BeforeButtonContent ?? ""),
                AfterButton: new ContentBlock(layout.AfterButtonContent ?? "")
            );

        private static FormContentBlocks Empty => new(ContentBlock.Empty, ContentBlock.Empty, ContentBlock.Empty);
    }

    private static IHtmlContent RenderContentBlock(ContentBlock block, string cssClass) =>
        !block.HasContent ? HtmlString.Empty :
        new HtmlContentBuilder()
            .AppendHtml($"<div class=\"{cssClass}\">")
            .AppendHtml(block.Content)
            .AppendHtml("</div>");

    private static IHtmlContent CreateButton(string buttonText) =>
        new HtmlContentBuilder()
            .AppendHtml($"<button type=\"submit\" class=\"govuk-button\">{buttonText}</button>");

    private static string GetButtonText(IFormElementModel? viewModel) =>
        !string.IsNullOrEmpty(viewModel?.Options?.Layout?.PrimaryButtonText)
            ? StaticTextResource.ResourceManager.GetString(viewModel.Options.Layout.PrimaryButtonText!) ?? StaticTextResource.Global_Continue
            : StaticTextResource.Global_Continue;

    private static IHtmlContent RenderQuestionWithContent(
        IHtmlContent questionContent,
        IHtmlContent button,
        FormContentBlocks content) =>
        new HtmlContentBuilder()
            .AppendHtml(questionContent)
            .AppendHtml(RenderContentBlock(content.BeforeButton, "govuk-!-margin-top-2 govuk-!-margin-bottom-1"))
            .AppendHtml(Environment.NewLine)
            .AppendHtml(button);

    private async Task<IHtmlContent> RenderMultiQuestionPage()
    {
        if (Model.MultiQuestionViewModel == null)
            return HtmlString.Empty;

        var pageTitle = !string.IsNullOrEmpty(Model.MultiQuestionViewModel.PageTitleResourceKey)
            ? FormsEngineResource.ResourceManager.GetString(Model.MultiQuestionViewModel.PageTitleResourceKey) ?? Model.MultiQuestionViewModel.Questions.FirstOrDefault()?.Title ?? ""
            : Model.MultiQuestionViewModel.Questions.FirstOrDefault()?.Title ?? "";
        ViewData["Title"] = pageTitle;

        return await Html.PartialAsync("_FormElementMultiQuestion", Model.MultiQuestionViewModel);
    }

    private async Task<IHtmlContent> RenderSingleQuestionPage()
    {
        var isCheckYourAnswersPage = Model.CurrentFormQuestionType == FormQuestionType.CheckYourAnswers;

        if (isCheckYourAnswersPage)
        {
            return await RenderCheckYourAnswersPage();
        }

        if (Model.PartialViewName == null || Model.PartialViewModel == null)
            return HtmlString.Empty;


        var contentBlocks = FormContentBlocks.FromLayout(Model.PartialViewModel.Options?.Layout);

        var questionContent = await Html.PartialAsync(Model.PartialViewName, Model.PartialViewModel);
        var button = CreateButton(GetButtonText(Model.PartialViewModel));

        return RenderQuestionWithContent(questionContent, button, contentBlocks);
    }

    private async Task<IHtmlContent> RenderCheckYourAnswersPage()
    {
        ViewData["Title"] = StaticTextResource.Forms_CheckYourAnswers_Title;
        var groupedAnswersModel = await Model.GetGroupedAnswersModel();
        return await Html.PartialAsync("_FormElementCheckYourAnswers", groupedAnswersModel);
    }
}
