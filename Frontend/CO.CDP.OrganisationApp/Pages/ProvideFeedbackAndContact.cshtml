@page "/provide-feedback-and-contact"
@model ProvideFeedbackAndContact
@{
    if (Model.Context == ContactFormTypes.Feedback)
    {
        ViewData["Title"] = "Provide Find a Tender Feedback";
    }
    else if (Model.Context == ContactFormTypes.Support)
    {
        ViewData["Title"] = "Contact Find a Tender";
    }

    var feedbackOrContactOptionHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.FeedbackOrContactOption)).HasInnerHtml;
    var urlOfPageHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.UrlOfPage)).HasInnerHtml;
    var detailsHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.Details)).HasInnerHtml;
    var nameHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.Name)).HasInnerHtml;
    var emailHasError = ((TagBuilder)Html.ValidationMessageFor(m => m.Email)).HasInnerHtml;
}

<main class="govuk-main-wrapper" id="main-content">
    <div class="govuk-grid-row">
        <div class="govuk-grid-column-two-thirds">
            <partial name="_ErrorSummary" model="@ModelState" />
            <h1 class="govuk-heading-xl">
                @ViewData["Title"]
            </h1>

            <form method="post" novalidate>
                @if (Model.Context == ContactFormTypes.Feedback)
                {
                    <p class="govuk-body">Use this form to ask a question, report a problem or suggest an improvement to the Find a Tender service team.</p>
                }
                else if (Model.Context == ContactFormTypes.Support)
                {
                    <p class="govuk-body">This form is to raise issues or support requests related to Find a Tender website.</p>
                    <p class="govuk-body">You can ask a question, report a problem or suggest an improvement to the Find a Tender team.</p>
                }

                <div class="govuk-form-group govuk-!-margin-bottom-6 @(feedbackOrContactOptionHasError ? "govuk-form-group--error" : "")">
                    <fieldset class="govuk-fieldset" @(feedbackOrContactOptionHasError ? Html.Raw("aria-describedby=\"FeedbackOrContactOption-error\"") : "")>
                        <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                            <span class="govuk-fieldset__heading">What's it to do with?</span>
                        </legend>

                        @Html.ValidationMessageFor(m => m.FeedbackOrContactOption, "", new { @class = "govuk-error-message", @id = "FeedbackOrContactOption-error" })

                        <div class="govuk-radios" data-module="govuk-radios">
                            <div class="govuk-radios__item">
                                <input type="radio" name="@nameof(Model.FeedbackOrContactOption)" id="@nameof(Model.FeedbackOrContactOption)" value="WholeSite" class="govuk-radios__input" @(Model.FeedbackOrContactOption == "WholeSite" ? "checked" : "")>
                                <label for="@nameof(Model.FeedbackOrContactOption)" class="govuk-label govuk-radios__label">The whole service</label>
                            </div>

                            <div class="govuk-radios__item">
                                <input type="radio" name="@nameof(Model.FeedbackOrContactOption)" id="@nameof(Model.FeedbackOrContactOption)-1" value="SpecificPage" class="govuk-radios__input" @(Model.FeedbackOrContactOption == "SpecificPage" ? "checked" : "") aria-controls="conditional-SpecificPage">
                                <label for="@nameof(Model.FeedbackOrContactOption)-1" class="govuk-label govuk-radios__label">A specific page</label>
                            </div>

                            <div class="govuk-radios__conditional govuk-body govuk-radios__conditional--hidden" id="conditional-SpecificPage">
                                <div class="govuk-form-group @(urlOfPageHasError ? "govuk-form-group--error" : "")">
                                    <label for="@nameof(Model.UrlOfPage)" class="govuk-label">Enter URL or name of page</label>
                                    @Html.ValidationMessageFor(m => m.UrlOfPage, "", new { @class = "govuk-error-message", @id = "UrlOfPage-error" })
                                    <input class="govuk-input" id="@nameof(Model.UrlOfPage)" name="@nameof(Model.UrlOfPage)" spellcheck="false" type="url" value="@Model.UrlOfPage" @(urlOfPageHasError ? Html.Raw("aria-describedby=\"UrlOfPage-error\"") : "")>
                                </div>
                            </div>                         
                        </div>
                    </fieldset>
                </div>

                <div class="govuk-form-group @(detailsHasError ? "govuk-form-group--error" : "")">
                    <div class="govuk-form-group govuk-character-count" data-module="govuk-character-count" data-maxlength="10000">
                        <h1 class="govuk-label-wrapper">
                            @if (Model.Context == ContactFormTypes.Feedback)
                            {
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                                    <span class="govuk-fieldset__heading">Enter your feedback</span>
                                </legend>
                            }
                            else if (Model.Context == ContactFormTypes.Support)
                            {
                                <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                                    <span class="govuk-fieldset__heading">What are the details?</span>
                                </legend>
                            }
                        </h1>
                        <div id="@nameof(Model.Details)-hint" class="govuk-hint">
                            Do not include personal or financial information like your National Insurance number or credit card details
                        </div>
                        @Html.ValidationMessageFor(m => m.Details, "", new { @class = "govuk-error-message", @id = "Details-error" })
                        <textarea class="govuk-textarea govuk-js-character-count" id="@nameof(Model.Details)" aria-describedby="@nameof(Model.Details)-hint @nameof(Model.Details)-info @(detailsHasError ? "Details-error" : "")" name="@nameof(Model.Details)" rows="5">@Model.Details</textarea>
                        <div id="@nameof(Model.Details)-info" class="govuk-hint govuk-character-count__message">
                            You can enter up to 10000 characters
                        </div>
                    </div>
                </div>


                <fieldset class="govuk-fieldset">

                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        <span class="govuk-fieldset__heading">Give us your details if you want a reply (optional)</span>
                    </legend>

                    <div class="govuk-form-group @(nameHasError ? "govuk-form-group--error" : "")">
                        <label for="@nameof(Model.Name)" class="govuk-label">Name</label>
                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "govuk-error-message", @id = "Name-error" })
                        <input autocomplete="@nameof(Model.Name)" class="govuk-input" id="@nameof(Model.Name)" name="@nameof(Model.Name)" spellcheck="false" type="text" value="@(Model.Name)" @(nameHasError ? Html.Raw("aria-describedby=\"Name-error\"") : "")>
                    </div>

                    <div class="govuk-form-group @(emailHasError ? "govuk-form-group--error" : "")">

                        <label for="@nameof(Model.Email)" class="govuk-label">Email address</label>

                        <div class="govuk-hint" id="@nameof(Model.Email)-hint">
                            We'll only use this to reply to your message
                        </div>
                        @Html.ValidationMessageFor(m => m.Email, "", new { @class = "govuk-error-message", @id = "Email-error" })
                        <input aria-describedby="@nameof(Model.Email)-hint @(emailHasError ? "Email-error" : "")" autocomplete="email" class="govuk-input" id="@nameof(Model.Email)" name="@nameof(Model.Email)" spellcheck="false" type="email" value="@(Model.Email)">
                    </div>
                </fieldset>

                <input type="hidden" name="@nameof(Model.Context)" value="@Model.Context.ToString()" />

                <govuk-button>Send message</govuk-button>
            </form>
        </div>
    </div>

</main>